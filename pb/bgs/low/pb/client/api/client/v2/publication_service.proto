syntax = "proto2";

package bgs.protocol.publication.v2.client;

import "google/protobuf/descriptor.proto";
import "bgs/low/pb/client/global_extensions/range.proto";
import "bgs/low/pb/client/global_extensions/field_options.proto";
import "bgs/low/pb/client/global_extensions/routing.proto";
import "bgs/low/pb/client/global_extensions/register_method_types.proto";
import "bgs/low/pb/client/global_extensions/method_options.proto";
import "bgs/low/pb/client/global_extensions/message_options.proto";
import "bgs/low/pb/client/global_extensions/service_options.proto";
import "bgs/low/pb/client/rpc_types.proto";
import "bgs/low/pb/client/api/client/v2/attribute_types.proto";
import "bgs/low/pb/client/api/client/v2/publication_types.proto";

option cc_generic_services = false;

service PublicationService {
	rpc Subscribe(.bgs.protocol.publication.v2.client.SubscribeRequest) returns(.bgs.protocol.publication.v2.client.SubscribeResponse) { 
		option (method_options).id = 1;
	}
	rpc Unsubscribe(.bgs.protocol.publication.v2.client.UnsubscribeRequest) returns(.bgs.protocol.NoData) { 
		option (method_options).id = 2;
	}
	option (service_options).descriptor_name = "bnet.protocol.publication.v2.client.PublicationService";
	option (service_options).shard_name = "publication";
	option (sdk_service_options).outbound = true;
	option (sdk_service_options).use_client_id = true;
}

message SubscribeRequest {
	repeated bgs.protocol.publication.v2.client.Target target = 1 ;
	optional bgs.protocol.publication.v2.client.SubscribeOptions options = 2;
}
message SubscribeResponse {
	repeated bgs.protocol.publication.v2.client.SubscribeResult failures = 1;
}
message UnsubscribeRequest {
	repeated bgs.protocol.publication.v2.client.Target target = 1 ;
}

