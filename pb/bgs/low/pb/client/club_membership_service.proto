syntax = "proto2";

package bgs.protocol.club.v1.membership;

import "bgs/low/pb/client/club_type.proto";
import "bgs/low/pb/client/club_enum.proto";
import "bgs/low/pb/client/role_types.proto";
import "bgs/low/pb/client/club_role.proto";
import "google/protobuf/descriptor.proto";
import "bgs/low/pb/client/global_extensions/message_options.proto";
import "bgs/low/pb/client/global_extensions/range.proto";
import "bgs/low/pb/client/global_extensions/field_options.proto";
import "bgs/low/pb/client/entity_types.proto";
import "bgs/low/pb/client/account_types.proto";
import "bgs/low/pb/client/global_extensions/routing.proto";
import "bgs/low/pb/client/global_extensions/register_method_types.proto";
import "bgs/low/pb/client/global_extensions/method_options.proto";
import "bgs/low/pb/client/global_extensions/service_options.proto";
import "bgs/low/pb/client/rpc_types.proto";
import "bgs/low/pb/client/club_member_id.proto";
import "bgs/low/pb/client/api/client/v2/attribute_types.proto";
import "bgs/low/pb/client/club_member.proto";
import "bgs/low/pb/client/embed_types.proto";
import "bgs/low/pb/client/event_view_types.proto";
import "bgs/low/pb/client/message_types.proto";
import "bgs/low/pb/client/ets_types.proto";
import "bgs/low/pb/client/club_stream.proto";
import "bgs/low/pb/client/club_tag.proto";
import "bgs/low/pb/client/club_core.proto";
import "bgs/low/pb/client/club_invitation.proto";
import "bgs/low/pb/client/club_membership_types.proto";
import "bgs/low/pb/client/club_range_set.proto";
import "bgs/low/pb/client/club_ban.proto";
import "bgs/low/pb/client/club_name_generator.proto";
import "bgs/low/pb/client/invitation_types.proto";
import "bgs/low/pb/client/voice_types.proto";
import "bgs/low/pb/client/club_types.proto";

option cc_generic_services = false;

service ClubMembershipService {
	rpc Subscribe(.bgs.protocol.club.v1.membership.SubscribeRequest) returns(.bgs.protocol.club.v1.membership.SubscribeResponse) { 
		option (method_options).id = 1;
	}
	rpc Unsubscribe(.bgs.protocol.club.v1.membership.UnsubscribeRequest) returns(.bgs.protocol.NoData) { 
		option (method_options).id = 2;
	}
	rpc GetState(.bgs.protocol.club.v1.membership.GetStateRequest) returns(.bgs.protocol.club.v1.membership.GetStateResponse) { 
		option (method_options).id = 3;
		option (method_options).idempotent = true;
	}
	rpc UpdateClubSharedSettings(.bgs.protocol.club.v1.membership.UpdateClubSharedSettingsRequest) returns(.bgs.protocol.NoData) { 
		option (method_options).id = 4;
	}
	rpc GetStreamMentions(.bgs.protocol.club.v1.membership.GetStreamMentionsRequest) returns(.bgs.protocol.club.v1.membership.GetStreamMentionsResponse) { 
		option (method_options).id = 5;
		option (method_options).idempotent = true;
	}
	rpc RemoveStreamMentions(.bgs.protocol.club.v1.membership.RemoveStreamMentionsRequest) returns(.bgs.protocol.NoData) { 
		option (method_options).id = 6;
	}
	rpc AdvanceStreamMentionViewTime(.bgs.protocol.club.v1.membership.AdvanceStreamMentionViewTimeRequest) returns(.bgs.protocol.NoData) { 
		option (method_options).id = 7;
	}
	option (service_options).descriptor_name = "bnet.protocol.club.v1.ClubMembershipService";
	option (service_options).shard_name = "club_membership";
	option (service_options).is_global = true;
	option (sdk_service_options).outbound = true;
	option (sdk_service_options).use_client_id = true;
}

message SubscribeRequest {
	optional bgs.protocol.account.v1.AccountId agent_id = 1 ;
	optional bgs.protocol.club.v1.ClubMembershipSubscribeOptions options = 2;
}
message SubscribeResponse {
	optional bgs.protocol.club.v1.ClubMembershipState state = 1;
}
message UnsubscribeRequest {
	optional bgs.protocol.account.v1.AccountId agent_id = 1 ;
}
message GetStateRequest {
	optional bgs.protocol.account.v1.AccountId agent_id = 1 ;
	optional bgs.protocol.club.v1.ClubMembershipGetStateOptions options = 2;
}
message GetStateResponse {
	optional bgs.protocol.club.v1.ClubMembershipState state = 1;
}
message UpdateClubSharedSettingsRequest {
	optional bgs.protocol.account.v1.AccountId agent_id = 1 ;
	optional bgs.protocol.club.v1.ClubSharedSettingsOptions options = 2;
}
message GetStreamMentionsRequest {
	optional bgs.protocol.account.v1.AccountId agent_id = 1 ;
	optional bgs.protocol.GetEventOptions options = 2;
	optional bool fetch_messages = 3;
}
message GetStreamMentionsResponse {
	repeated bgs.protocol.club.v1.StreamMention mention = 1;
	optional uint64 continuation = 2;
}
message RemoveStreamMentionsRequest {
	optional bgs.protocol.account.v1.AccountId agent_id = 1 ;
	repeated bgs.protocol.TimeSeriesId mention_id = 2;
}
message AdvanceStreamMentionViewTimeRequest {
	optional bgs.protocol.account.v1.AccountId agent_id = 1 ;
}

